<?php
/**
 * @file
 * Module implements 3D Security functionality.
 */

/**
 * Implements hook_menu().
 */
function commerce_cardinity_3d_secure_menu() {
  $items = array();

  $items['commerce_cardinity_3d_secure/3d_secure_waiting_page'] = array(
    'page callback' => 'commerce_cardinity_3d_secure_waiting_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // Define a path to receive 3D Secure callback.
  $items['commerce-cardinity/3d_secure_callback/%'] = array(
    'page callback' => 'commerce_cardinity_3d_secure_callback',
    'page arguments' => array(2),
    // No access restriction because it's a public return URL from bank's ACS.
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_commerce_checkout_router().
 */
function commerce_cardinity_3d_secure_commerce_checkout_router($order, $checkout_page) {
  // Check if we have an active 3D Secure request from a payment module.
  // If we don't, skip this page and move onto the next in the checkout process.
  if ($checkout_page['page_id'] == '3d_secure') {

    // If there is 3D Authentication required, the payment module should have
    // placed an array in an order object field called 'extra_authorisation'.
    // This data won't be stored permanently, just used for this transaction.
    // If the array is not present in the order object or any of the 4 fields
    // are missing, we skip straight past the checkout page.
    $skip_3d_secure = FALSE;

    if (!isset($order->data['extra_authorisation']) || 
        !isset($order->data['extra_authorisation']['3dsv'])) {
      $skip_3d_secure = TRUE;
    } else {
      //parameters will be looked for depending on this
      $threeds_version = $order->data['extra_authorisation']['3dsv'];

      $v1params_dontexist = (!isset($order->data['extra_authorisation']['PAReq']) ||
        !isset($order->data['extra_authorisation']['ACSURL']) ||
        !isset($order->data['extra_authorisation']['MD']) ||
        !isset($order->data['extra_authorisation']['TermUrl']));

      $v2params_dontexist = (!isset($order->data['extra_authorisation']['creq']) ||
        !isset($order->data['extra_authorisation']['acs_url']) ||
        !isset($order->data['extra_authorisation']['threeDSSessionData']));
       
      if( ($threeds_version == 1 && $v1params_dontexist) || $threeds_version == 2 && $v2params_dontexist){
        watchdog('commerce_cardinity_3d_secure', 'Only partial 3D Secure Data present, cannot proceed so skipping this step', array(), WATCHDOG_WARNING);
        $skip_3d_secure = TRUE;
      }   
    }

    if ($skip_3d_secure) {
      // If there are no 3d secure markers in the order, we're done.
      // Go to checkout completion page or to the offsite redirect page.
      $checkout_pages = commerce_checkout_pages();
      $next_step = $checkout_pages['3d_secure']['next_page'];
      commerce_order_status_update($order, 'checkout_' . $next_step);

      // Inform modules of checkout completion if the next page is Completed.
      if ($next_step == 'complete') {
        commerce_checkout_complete($order);
      }

      drupal_goto('checkout/' . $order->order_id . '/' . $next_step);
    }
  }
}

/**
 * Implements hook_commerce_checkout_page_info().
 */
function commerce_cardinity_3d_secure_commerce_checkout_page_info() {
  $checkout_pages = array();

  // Define an additional Checkout page for 3D Secure authentication
  // Add at a default weight of 15 so it appears before the thank you page
  // which has a default weight of 20.
  $checkout_pages['3d_secure'] = array(
    'title' => t('3D Secure Authentication'),
    'help' => t('Your payment card provider has requested some additional security details.'),
    'status_cart' => FALSE,
    'locked' => TRUE,
    'buttons' => FALSE,
    'weight' => 22,
  );
  return $checkout_pages;
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_cardinity_3d_secure_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['3d_secure'] = array(
    'title' => t('3D Secure Authentication'),
    'module' => 'commerce_cardinity_3d_secure',
    'page' => '3d_secure',
    'collapsible' => FALSE,
    'collapsed' => FALSE,
    'weight' => 0,
    'enabled' => TRUE,
    'review' => FALSE,
    'base' => 'commerce_cardinity_3d_secure_pane',
    'callbacks' => array('checkout_form'),
  );

  return $checkout_panes;

}

/**
 * Implements hook_checkout_form().
 */
function commerce_cardinity_3d_secure_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  // Add the fields required for 3D Secure transaction.
  drupal_add_js("window.onload = function() { document.forms['commerce-checkout-form-3d-secure'].submit(); }", 'inline');

  $form['test'] = array(
    '#type' => 'item',
    '#value' => t('Please wait to be redirected to your card provider for authorisation.'),
  );

  if($order->data['extra_authorisation']['3dsv'] == 1) {
    $form['PaReq'] = array(
      '#type' => 'hidden',
      '#default_value' => $order->data['extra_authorisation']['PAReq'],
    );
  
    $form['TermUrl'] = array(
      '#type' => 'hidden',
      '#default_value' => $order->data['extra_authorisation']['TermUrl'],
    );
  
    $form['MD'] = array(
      '#type' => 'hidden',
      '#default_value' => $order->data['extra_authorisation']['MD'],
    );
  
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Proceed with 3D Secure Authentication',
    );
  
    $form['hidden_action'] = array(
      '#type' => 'hidden',
      '#value' => $order->data['extra_authorisation']['ACSURL'],
    );
  } elseif($order->data['extra_authorisation']['3dsv'] == 2){    
    $form['creq'] = array(
      '#type' => 'hidden',
      '#default_value' => $order->data['extra_authorisation']['creq'],
    );
    $form['threeDSSessionData'] = array(
      '#type' => 'hidden',
      '#default_value' => $order->data['extra_authorisation']['threeDSSessionData'],
    );  
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Proceed with 3D Secure Authentication',
    );  
    $form['hidden_action'] = array(
      '#type' => 'hidden',
      '#value' => $order->data['extra_authorisation']['acs_url'],
    );
  }

  return $form;
}

/**
 * Implements hook_form_alter().
 */
function commerce_cardinity_3d_secure_form_alter(&$form, &$form_state, $form_id) {
  // Modify the checkout form so we can change the action to redirect offsite.
  // Also rewrite the fields so they are at the top level of the form array.
  if ($form_id == 'commerce_checkout_form_3d_secure') {
    $form['#action'] = $form['3d_secure']['hidden_action']['#value'];

    if(isset($form['3d_secure']['PaReq'])){
      // Move the fields to the top level.
      $form['PaReq'] = $form['3d_secure']['PaReq'];
      $form['TermUrl'] = $form['3d_secure']['TermUrl'];
      $form['MD'] = $form['3d_secure']['MD'];
      $form['submit'] = $form['3d_secure']['submit'];
    }elseif(isset($form['3d_secure']['creq'])){
      // Move the fields to the top level.
      $form['creq'] = $form['3d_secure']['creq'];
      $form['threeDSSessionData'] = $form['3d_secure']['threeDSSessionData'];
      $form['submit'] = $form['3d_secure']['submit'];
    }

    
    unset($form['submit']);
    // Remove redundant form elements.
    unset($form['3d_secure']);
  }
}

/**
 * Process callback response from merchant server.
 *
 * @param int $order_id
 *   The order number being processed.
 */
function commerce_cardinity_3d_secure_callback($order_id) {
  // If there's no data in the POST, return a page not found.

  if (empty($_POST)) {
    return MENU_NOT_FOUND;
  }
  // Attempt to reload the order.
  $order = commerce_order_load($order_id);

  // If the order doesn't exist, return a page not found.
  if (!isset($order)) {
    return MENU_NOT_FOUND;
  }

  // Check the order status - if it's already complete return a page not found.
  $order_status = commerce_order_status_load($order->status);
  if ($order_status['name'] != 'checkout_3d_secure') {
    return MENU_NOT_FOUND;
  }

  $threeds_version = false;

  // Check for 3d secure response field.
  if (isset($_POST['threeDSSessionData']) && isset($_POST['cres'])) {
    //enough params to process a v2 authorization
    $threeds_version = 2;
  } elseif (isset($_POST['MD']) && isset($_POST['PaRes'])) {
    //enough params to process a v1 authorization
    $threeds_version = 1;
  } 

  if($threeds_version == false){
    watchdog('commerce_cardinity', 'Invalid data received in 3D Secure response', array(), WATCHDOG_ERROR);
    return MENU_NOT_FOUND;
  }

  $transaction = commerce_cardinity_3d_secure_load_transaction($order);
  if (!$transaction) {
    return MENU_NOT_FOUND;
  }

  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);

  if($threeds_version == 1){
    // Process callback as 3dsv1
    $md = check_plain($_POST['MD']);
    $pares = check_plain($_POST['PaRes']);

    // Process the callback.
    $response = _commerce_cardinity_request_patch($payment_method, $md, $pares);
  }elseif($threeds_version == 2){
    // Process callback as 3dsv1
    $threeDSSessionData = check_plain($_POST['threeDSSessionData']);
    $cres = check_plain($_POST['cres']);

    // Process the callback.
    $response = _commerce_cardinity_request_patch($payment_method, $threeDSSessionData, $cres, true);
  }

  $success = commerce_cardinity_process_response($payment_method, $order, $response, $transaction);

  //Payment still pending, retry 3dsv1
  if($response['status'] == "pending"){

    $checkout_pages = commerce_checkout_pages();
    $next_step = $checkout_pages['3d_secure']['next_page'];

    $v1url = url('commerce-cardinity/3d_secure_callback/' . $order->order_id, array('absolute' => TRUE));
    echo '<html>
        <head>
          <title>3-D Secure Example</title>
          <script type="text/javascript">
              function OnLoadEvent()
              {
                // Make the form post as soon as it has been loaded.
                document.ThreeDForm.submit();
              }
          </script>
        </head>
        <body onload="OnLoadEvent();">
          <p>
              If your browser does not start loading the page,
              press the button below.
              You will be sent back to this site after you
              authorize the transaction.
          </p>
          <form name="ThreeDForm" method="POST" action="'.$response['authorization_information']['url'].'">
              <button type=submit>Click Here</button>
              <input type="hidden" name="PaReq" value="'.$response['authorization_information']['data'].'" />
              <input type="hidden" name="TermUrl" value="'.$v1url.'" />
              <input type="hidden" name="MD" value="'.$response['id'].'" />
          </form>
        </body>
    </html>';
    exit();     
  } elseif ($success) {
    $checkout_pages = commerce_checkout_pages();
    $next_step = $checkout_pages['3d_secure']['next_page'];

    $order = commerce_order_status_update($order, 'checkout_' . $next_step);

    // Inform modules of checkout completion if the next page is Completed.
    if ($next_step == 'complete') {
      commerce_checkout_complete($order);
    }

    $redirect = 'checkout/' . $order->order_id . '/' . $next_step;
  } else {
    $order = commerce_order_status_update($order, 'checkout_checkout');
    $redirect = 'checkout/' . $order->order_id . '';
  }

  drupal_goto($redirect);
}

/**
 * Check if an order has a partial 3D secure transaction and return it.
 *
 * @param object $order
 *   An order object.
 */
function commerce_cardinity_3d_secure_load_transaction($order) {
  // Search for existing transaction.
  $conditions = array('order_id' => $order->order_id, 'remote_status' => 'pending');
  $transactions = commerce_payment_transaction_load_multiple(array(), $conditions);

  if (empty($transactions)) {
    return NULL;
  }

  $transaction = array_pop($transactions);

  return $transaction;
}

/**
 * Send a POST request to cardinity and return the response as an array.
 */
function _commerce_cardinity_request_patch($payment_method, $payment_id, $authorize_data, $isThreedV2 = false) {

  module_load_include('php', 'commerce_cardinity', 'lib/CommerceCardinityOAuth');

  if($isThreedV2){
    $data = drupal_json_encode(array(
      'cres' => $authorize_data,
    ));
  }else{
    $data = drupal_json_encode(array(
      'authorize_data' => $authorize_data,
    ));
  }  

  $oauth = new CommerceCardinityOAuth($payment_method['settings']['consumer_key'], $payment_method['settings']['consumer_secret']);
  $oauth->setAction('PATCH')->setPath('https://api.cardinity.com/v1/payments/' . $payment_id);

  $options = array(
    'method' => 'PATCH',
    'data' => $data,
    'headers' => array(
      'Content-Type' => 'application/json',
      'Authorization' => $oauth->getHeaderString(),
    ),
  );

  $result = drupal_http_request($oauth->path, $options);

  $response = drupal_json_decode($result->data);

  $response['response_code'] = $result->code;

  return $response;
}
